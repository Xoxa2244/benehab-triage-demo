// pages/api/profiling/values/submit.js

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { colorAssociations, colorRankings } = req.body;

    if (!colorAssociations || !colorRankings) {
      return res.status(400).json({ 
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–∞–Ω–Ω—ã–µ –æ —Ü–≤–µ—Ç–æ–≤—ã—Ö –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è—Ö –∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ü–≤–µ—Ç–æ–≤' 
      });
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω–Ω–æ—Å—Ç–Ω—É—é –º–æ–¥–µ–ª—å
    const profile = calculateValuesProfile(colorAssociations, colorRankings);

    res.status(200).json({
      success: true,
      profile,
      message: '–¶–µ–Ω–Ω–æ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω–Ω–æ—Å—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω–Ω–æ—Å—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏',
      details: error.message 
    });
  }
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ü–µ–Ω–Ω–æ—Å—Ç–Ω—É—é –º–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–≤–µ—Ç–æ–≤—ã—Ö –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–π –∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤
 * @param {Object} colorAssociations - —Ü–≤–µ—Ç–æ–≤—ã–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–Ω—è—Ç–∏—è
 * @param {Array} colorRankings - —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ –ø–æ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * @returns {Object} –ø—Ä–æ—Ñ–∏–ª—å —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
 */
function calculateValuesProfile(colorAssociations, colorRankings) {
  console.log('üîç –û—Ç–ª–∞–¥–∫–∞ calculateValuesProfile:');
  console.log('colorAssociations:', colorAssociations);
  console.log('colorRankings:', colorRankings);
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–≤–µ—Ç–æ–≤—ã–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏
  const colorAnalysis = analyzeColorAssociations(colorAssociations);
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤
  const rankingAnalysis = analyzeColorRankings(colorRankings, colorAssociations);
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π
  const valueIndices = calculateValueIndices(colorAssociations, colorRankings);
  console.log('üìä –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π:', valueIndices);
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
  const profile = {
    version: 'V/1.0',
    color_associations: colorAnalysis,
    color_rankings: rankingAnalysis,
    value_indices: valueIndices,
    communication_guidelines: generateCommunicationGuidelines(colorAnalysis, rankingAnalysis)
  };

  return profile;
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ü–≤–µ—Ç–æ–≤—ã–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏
 */
function analyzeColorAssociations(colorAssociations) {
  const analysis = {
    positive_colors: {},
    negative_colors: {},
    neutral_colors: {},
    dominant_color: null
  };

  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –∫–∞–∂–¥–æ–≥–æ —Ü–≤–µ—Ç–∞
  const colorCounts = {};
  Object.values(colorAssociations).forEach(color => {
    colorCounts[color] = (colorCounts[color] || 0) + 1;
  });

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Ü–≤–µ—Ç
  analysis.dominant_color = Object.entries(colorCounts)
    .sort(([,a], [,b]) => b - a)[0]?.[0] || null;

  // –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ü–≤–µ—Ç–∞ –ø–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ
  const positiveColors = ['green', 'blue', 'yellow', 'pink'];
  const negativeColors = ['red', 'black', 'brown', 'gray'];
  const neutralColors = ['white', 'orange', 'purple'];

  Object.entries(colorAssociations).forEach(([concept, color]) => {
    if (positiveColors.includes(color)) {
      analysis.positive_colors[concept] = color;
    } else if (negativeColors.includes(color)) {
      analysis.negative_colors[concept] = color;
    } else {
      analysis.neutral_colors[concept] = color;
    }
  });

  return analysis;
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤
 */
function analyzeColorRankings(colorRankings, colorAssociations) {
  const analysis = {
    top_colors: colorRankings.slice(0, 5), // –¢–æ–ø-5 –ø—Ä–∏—è—Ç–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
    bottom_colors: colorRankings.slice(-5), // –¢–æ–ø-5 –Ω–µ–ø—Ä–∏—è—Ç–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
    concept_distribution: {},
    color_emotion_map: {},
    top_priorities: [],
    bottom_priorities: []
  };

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–Ω—è—Ç–∏–π –ø–æ —Ü–≤–µ—Ç–∞–º
  colorRankings.forEach((color, index) => {
    const conceptsWithThisColor = Object.keys(colorAssociations).filter(
      concept => colorAssociations[concept] === color
    );
    
    analysis.concept_distribution[color] = {
      rank: index + 1,
      concepts: conceptsWithThisColor,
      count: conceptsWithThisColor.length
    };
    
    // –ú–∞–ø–ø–∏–Ω–≥ —ç–º–æ—Ü–∏–π –ø–æ —Ü–≤–µ—Ç–∞–º
    analysis.color_emotion_map[color] = {
      rank: index + 1,
      emotion: index < colorRankings.length / 2 ? 'positive' : 'negative',
      intensity: Math.abs((colorRankings.length / 2) - index)
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–Ω—è—Ç–∏—è –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
    if (index < 3) {
      analysis.top_priorities.push(...conceptsWithThisColor);
    } else if (index >= colorRankings.length - 3) {
      analysis.bottom_priorities.push(...conceptsWithThisColor);
    }
  });

  return analysis;
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏–Ω–¥–µ–∫—Å—ã —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–≤–µ—Ç–æ–≤—ã—Ö –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–π –∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function calculateValueIndices(colorAssociations, colorRankings) {
  return {
    life_satisfaction: calculateLifeSatisfactionIndex(colorAssociations, colorRankings),
    future_orientation: calculateFutureOrientationIndex(colorAssociations, colorRankings),
    treatment_attitude: calculateTreatmentAttitudeIndex(colorAssociations, colorRankings),
    family_importance: calculateFamilyImportanceIndex(colorAssociations, colorRankings),
    health_priority: calculateHealthPriorityIndex(colorAssociations, colorRankings),
    social_orientation: calculateSocialOrientationIndex(colorAssociations, colorRankings),
    self_attitude: calculateSelfAttitudeIndex(colorAssociations, colorRankings),
    death_attitude: calculateDeathAttitudeIndex(colorAssociations, colorRankings),
    addiction_attitude: calculateAddictionAttitudeIndex(colorAssociations, colorRankings),
    needs_satisfaction: calculateNeedsSatisfactionIndex(colorAssociations, colorRankings)
  };
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
 */
function generateCommunicationGuidelines(colorAnalysis, rankingAnalysis) {
  const guidelines = {
    positive_values: Object.keys(colorAnalysis.positive_colors),
    sensitive_topics: Object.keys(colorAnalysis.negative_colors),
    communication_style: determineCommunicationStyle(colorAnalysis),
    motivators: rankingAnalysis.top_priorities.slice(0, 5),
    avoid_topics: rankingAnalysis.bottom_priorities.slice(0, 5)
  };

  return guidelines;
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏–Ω–¥–µ–∫—Å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∂–∏–∑–Ω—å—é
 */
function calculateLifeSatisfactionIndex(colorAssociations, colorRankings) {
  const lifeConcepts = ['–°—á–∞—Å—Ç—å–µ', '–†–∞–¥–æ—Å—Ç—å', '–ù–∞–¥–µ–∂–¥–∞', '–õ—é–±–æ–≤—å', '–°–µ–º—å—è', '–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ'];
  let totalScore = 0;
  let count = 0;
  
  console.log('üîç –û—Ç–ª–∞–¥–∫–∞ calculateLifeSatisfactionIndex:');
  console.log('lifeConcepts:', lifeConcepts);
  
  lifeConcepts.forEach(concept => {
    if (colorAssociations[concept]) {
      const color = colorAssociations[concept];
      const rank = colorRankings.indexOf(color);
      console.log(`‚úÖ ${concept} -> ${color} -> rank ${rank}`);
      if (rank !== -1) {
        // –ß–µ–º –≤—ã—à–µ —Ä–∞–Ω–≥ (–±–ª–∏–∂–µ –∫ –Ω–∞—á–∞–ª—É), —Ç–µ–º –ª—É—á—à–µ
        totalScore += (colorRankings.length - rank);
        count++;
      }
    } else {
      console.log(`‚ùå ${concept} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ colorAssociations`);
    }
  });
  
  const result = count > 0 ? Math.round((totalScore / count) / colorRankings.length * 100) : 50;
  console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: totalScore=${totalScore}, count=${count}, result=${result}`);
  
  return result;
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–∞ –±—É–¥—É—â–µ–µ
 */
function calculateFutureOrientationIndex(colorAssociations, colorRankings) {
  const futureConcepts = ['–ë—É–¥—É—â–µ–µ', '–ù–∞–¥–µ–∂–¥–∞', '–ü–µ—Ä–µ–º–µ–Ω—ã', '–£—Å–ø–µ—Ö', '–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ'];
  let totalScore = 0;
  let count = 0;
  
  futureConcepts.forEach(concept => {
    if (colorAssociations[concept]) {
      const color = colorAssociations[concept];
      const rank = colorRankings.indexOf(color);
      if (rank !== -1) {
        totalScore += (colorRankings.length - rank);
        count++;
      }
    }
  });
  
  return count > 0 ? Math.round((totalScore / count) / colorRankings.length * 100) : 50;
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ –ª–µ—á–µ–Ω–∏—é
 */
function calculateTreatmentAttitudeIndex(colorAssociations, colorRankings) {
  const treatmentConcepts = ['–õ–µ—á–µ–Ω–∏–µ', '–í—Ä–∞—á', '–ú–µ–¥—Ä–∞–±–æ—Ç–Ω–∏–∫–∏', '–ó–¥–æ—Ä–æ–≤—å–µ', '–ë–æ–ª–µ–∑–Ω—å'];
  let totalScore = 0;
  let count = 0;
  
  treatmentConcepts.forEach(concept => {
    if (colorAssociations[concept]) {
      const color = colorAssociations[concept];
      const rank = colorRankings.indexOf(color);
      if (rank !== -1) {
        totalScore += (colorRankings.length - rank);
        count++;
      }
    }
  });
  
  return count > 0 ? Math.round((totalScore / count) / colorRankings.length * 100) : 50;
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –≤–∞–∂–Ω–æ—Å—Ç–∏ —Å–µ–º—å–∏
 */
function calculateFamilyImportanceIndex(colorAssociations, colorRankings) {
  const familyConcepts = ['–°–µ–º—å—è', '–õ—é–±–æ–≤—å', '–î—Ä—É–∂–±–∞', '–°–≤–∞–¥—å–±–∞', '–î–æ–º'];
  let totalScore = 0;
  let count = 0;
  
  familyConcepts.forEach(concept => {
    if (colorAssociations[concept]) {
      const color = colorAssociations[concept];
      const rank = colorRankings.indexOf(color);
      if (rank !== -1) {
        totalScore += (colorRankings.length - rank);
        count++;
      }
    }
  });
  
  return count > 0 ? Math.round((totalScore / count) / colorRankings.length * 100) : 50;
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∑–¥–æ—Ä–æ–≤—å—è
 */
function calculateHealthPriorityIndex(colorAssociations, colorRankings) {
  const healthConcepts = ['–ó–¥–æ—Ä–æ–≤—å–µ', '–ë–æ–ª–µ–∑–Ω—å', '–õ–µ—á–µ–Ω–∏–µ', '–°–ø–æ—Ä—Ç', '–û—Ç–¥—ã—Ö'];
  let totalScore = 0;
  let count = 0;
  
  healthConcepts.forEach(concept => {
    if (colorAssociations[concept]) {
      const color = colorAssociations[concept];
      const rank = colorRankings.indexOf(color);
      if (rank !== -1) {
        totalScore += (colorRankings.length - rank);
        count++;
      }
    }
  });
  
  return count > 0 ? Math.round((totalScore / count) / colorRankings.length * 100) : 50;
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏–Ω–¥–µ–∫—Å —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
 */
function calculateSocialOrientationIndex(colorAssociations, colorRankings) {
  const socialConcepts = ['–î—Ä—É–∑—å—è', '–ö–æ–ª–ª–µ–≥–∏', '–°–æ—Å–µ–¥–∏', '–û–±—â–µ–Ω–∏–µ', '–í–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ'];
  let totalScore = 0;
  let count = 0;
  
  socialConcepts.forEach(concept => {
    if (colorAssociations[concept]) {
      const color = colorAssociations[concept];
      const rank = colorRankings.indexOf(color);
      if (rank !== -1) {
        totalScore += (colorRankings.length - rank);
        count++;
      }
    }
  });
  
  return count > 0 ? Math.round((totalScore / count) / colorRankings.length * 100) : 50;
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ —Å–µ–±–µ
 */
function calculateSelfAttitudeIndex(colorAssociations, colorRankings) {
  const selfConcepts = ['–Ø —Å–∞–º', '–ì–æ—Ä–¥–æ—Å—Ç—å', '–ü—Ä–∏–∑–Ω–∞–Ω–∏–µ', '–ú—É–¥—Ä–æ—Å—Ç—å', '–í–µ—Ä–Ω–æ—Å—Ç—å'];
  let totalScore = 0;
  let count = 0;
  
  selfConcepts.forEach(concept => {
    if (colorAssociations[concept]) {
      const color = colorAssociations[concept];
      const rank = colorRankings.indexOf(color);
      if (rank !== -1) {
        totalScore += (colorRankings.length - rank);
        count++;
      }
    }
  });
  
  return count > 0 ? Math.round((totalScore / count) / colorRankings.length * 100) : 50;
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ —Å–º–µ—Ä—Ç–∏
 */
function calculateDeathAttitudeIndex(colorAssociations, colorRankings) {
  const deathConcepts = ['–°–º–µ—Ä—Ç—å', '–°—Ç—Ä–∞—Ö', '–¢—Ä–µ–≤–æ–≥–∞', '–°—Ç—Ä–∞–¥–∞–Ω–∏–µ', '–û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ'];
  let totalScore = 0;
  let count = 0;
  
  deathConcepts.forEach(concept => {
    if (colorAssociations[concept]) {
      const color = colorAssociations[concept];
      const rank = colorRankings.indexOf(color);
      if (rank !== -1) {
        totalScore += (colorRankings.length - rank);
        count++;
      }
    }
  });
  
  return count > 0 ? Math.round((totalScore / count) / colorRankings.length * 100) : 50;
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ –∞–¥–¥–∏–∫—Ü–∏—è–º
 */
function calculateAddictionAttitudeIndex(colorAssociations, colorRankings) {
  // –í CSV –Ω–µ—Ç –ø—Ä—è–º—ã—Ö –ø–æ–Ω—è—Ç–∏–π –æ–± –∞–¥–¥–∏–∫—Ü–∏—è—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Å–≤–µ–Ω–Ω—ã–µ
  const addictionConcepts = ['–°—Ç—Ä–∞—Ö', '–¢—Ä–µ–≤–æ–≥–∞', '–£—Å—Ç–∞–ª–æ—Å—Ç—å', '–°—Ç—Ä–∞–¥–∞–Ω–∏–µ', '–°—Ç—ã–¥'];
  let totalScore = 0;
  let count = 0;
  
  addictionConcepts.forEach(concept => {
    if (colorAssociations[concept]) {
      const color = colorAssociations[concept];
      const rank = colorRankings.indexOf(color);
      if (rank !== -1) {
        totalScore += (colorRankings.length - rank);
        count++;
      }
    }
  });
  
  return count > 0 ? Math.round((totalScore / count) / colorRankings.length * 100) : 50;
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏–Ω–¥–µ–∫—Å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π
 */
function calculateNeedsSatisfactionIndex(colorAssociations, colorRankings) {
  const needsConcepts = [
    '–ë–æ–≥–∞—Ç—Å—Ç–≤–æ', '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', '–î—Ä—É–∂–±–∞', '–ü—Ä–∏–∑–Ω–∞–Ω–∏–µ', '–í–ª–∞—Å—Ç—å',
    '–ó–Ω–∞–Ω–∏—è', '–ö—Ä–∞—Å–æ—Ç–∞', '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ', '–†–∞–±–æ—Ç–∞', '–°–µ–º—å—è', '–°–ø–æ—Ä—Ç', '–†–µ–ª–∏–≥–∏—è'
  ];
  let totalScore = 0;
  let count = 0;
  
  needsConcepts.forEach(concept => {
    if (colorAssociations[concept]) {
      const color = colorAssociations[concept];
      const rank = colorRankings.indexOf(color);
      if (rank !== -1) {
        totalScore += (colorRankings.length - rank);
        count++;
      }
    }
  });
  
  return count > 0 ? Math.round((totalScore / count) / colorRankings.length * 100) : 50;
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∏–ª—å –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ü–≤–µ—Ç–æ–≤
 */
function determineCommunicationStyle(colorAnalysis) {
  const positiveCount = Object.keys(colorAnalysis.positive_colors).length;
  const negativeCount = Object.keys(colorAnalysis.negative_colors).length;
  const totalCount = positiveCount + negativeCount + Object.keys(colorAnalysis.neutral_colors).length;
  
  const positiveRatio = positiveCount / totalCount;
  
  if (positiveRatio > 0.6) {
    return 'optimistic';
  } else if (positiveRatio < 0.4) {
    return 'supportive';
  } else {
    return 'balanced';
  }
}
